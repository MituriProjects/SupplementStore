@model IndexVM

@{

    var tokenSet = antiforgery.GetAndStoreTokens(Context);
}

<environment exclude="Testing">

    <div>
        @if (User.IsInRole("Admin")) {

            <a asp-controller="Product" asp-action="Create" class="btn btn-outline-success m-2">@Localizer["NewProductButtonText"]</a>
        }
    </div>

    @await Html.PartialAsync("_FilterSection", new FilterSectionVM {
        Page = Model.Page,
        ControllerName = "Product",
        ActionName = "Index"
    })

    <ul class="list-unstyled">

        @foreach (var product in Model.Products) {

            <li class="mx-2">

                <img src="~/productImages/@product.Id/@product.MainImage" width="50" />

                <a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id" class="btn btn-secondary m-2">
                    @product.Name -> @product.Price.ToString()
                </a>

                @{

                    var productRating = Model.ProductRatings[product.Id];
                }

                <span>@Localizer["RatingLabel"]:</span>
                <span>@productRating.Average</span>
                <span>(@productRating.Count)</span>

                @if (User.Identity.IsAuthenticated) {

                    <img src="~/images/emptyStar.png"
                         alt="not in a wish list"
                         class="wish-btn"
                         data-product-id="@product.Id"
                         data-wish-list-presence="false"
                         style="cursor:pointer;" />
                }

                @if (User.IsInRole("Admin")) {

                    <a asp-controller="Product" asp-action="Edit" asp-route-id="@product.Id" class="btn btn-outline-primary">@Localizer["EditProductButtonText"]</a>
                }

            </li>
        }

    </ul>

    <script type="text/javascript">

        $(document).ready(function () {

            $(".wish-btn")
                .each(function () {

                    sendRequest(this, "GET", data => {

                        if (data === true) {

                            arrangeWishListInclusion(this);
                        }
                    });
                });

            $(".wish-btn")
                .click(toggleWishListPresence);

            function toggleWishListPresence(eventData) {

                var isOnWishList = $(eventData.target)
                    .attr("data-wish-list-presence")

                if (isOnWishList === "true") {

                    sendRequest(eventData.target, "DELETE", () => arrangeWishListExclusion(this));
                }
                else {

                    sendRequest(eventData.target, "POST", () => arrangeWishListInclusion(this));
                }
            }

            function arrangeWishListInclusion(element) {

                $(element).attr({
                    "data-wish-list-presence": true,
                    src: "/images/filledStar.png",
                    alt: "in a wish list"
                });
            }

            function arrangeWishListExclusion(element) {

                $(element).attr({
                    "data-wish-list-presence": false,
                    src: "/images/emptyStar.png",
                    alt: "not in a wish list"
                });
            }

            function sendRequest(wishBtn, type, successCallback) {

                $.ajax(getUrl(wishBtn), {

                    headers: {
                        '@tokenSet.HeaderName': '@tokenSet.RequestToken'
                    },
                    type: type,
                    success: successCallback
                });
            }

            function getUrl(relatedElement) {

                return `api/wish/${getProductId(relatedElement)}`;
            }

            function getProductId(relatedElement) {

                return $(relatedElement)
                    .attr("data-product-id");
            }
        });

    </script>

</environment>

<environment include="Testing">

    <div name="AllProductsCount">@Model.Page.Count</div>

    @foreach (var product in Model.Products) {

        <div name="ProductId">@product.Id</div>
        <div name="ProductName">@product.Name</div>
        <div name="ProductPrice">@product.Price.ToString()</div>
        <div name="ProductMainImage">@product.MainImage</div>

        var productRating = Model.ProductRatings[product.Id];

        <div name="AverageRating">@productRating.Average</div>
        <div name="RatingCount">@productRating.Count</div>
    }

</environment>
